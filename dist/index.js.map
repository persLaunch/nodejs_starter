{"version":3,"sources":["../server/index.js"],"names":["buu","toto","console","log"],"mappings":";;AAEA;AACA,IAAIA,GAAG,GAAG,CAAV;;AAEA,SAASC,IAAT,GAAgB;AAEZC,EAAAA,OAAO,CAACC,GAAR,CAAYH,GAAZ,EAFY,CAEM;;AAElBA,EAAAA,GAAG,GAAG,EAAN,CAJY,CAIF;;AACVE,EAAAA,OAAO,CAACC,GAAR,CAAYH,GAAZ,EALY,CAKM;AACrB;;AAEDC,IAAI;AAGJ","sourcesContent":["\n\n// L'absence du var change tout !\nlet buu = 1;\n\nfunction toto() {\n\n    console.log(buu); // var buu; dans le context ? non -> var buu; dans parent ? -> il se bind au parent = 1\n\n    buu = 10; // Le buu du parent = buu context de la fonction = 10\n    console.log(buu); // 10\n}\n\ntoto();\n\n\n/*\n// L'absence du var change tout !\nvar buu = 1;\n\n(function() {\n\n    console.log( buu ); // var buu; dans le context ? non -> var buu; dans parent ? -> il se bind au parent = 1\n    buu = 10;  // Le buu du parent = buu context de la fonction = 10\n    console.log( buu ); // 10\n})();\n\nconsole.log( buu ); // 10\n\nconsole.log( '\\n' );\n\n// Le var change tout !\nvar foo = 1;\n\n(function() {\n\n    console.log( foo ); // var foo; dans le context ?\n    OUIIII (même s'il est après il est décomposé en var foo\n    au début puis foo = 10 à la même place ) // undefined\n    var foo = 10; // foo (function context) = 10\n    console.log( foo ); // 10\n})();\n\nconsole.log( foo ); // 1\n*/\n"],"file":"index.js"}